import streamlit as st
import json, os
from datetime import datetime
hoje = datetime.now().date()

def txt(pt, es):
    return pt if st.session_state.get("idioma") != "es" else es

# Inicializa vari√°veis boutique
for chave in [
    "pagina_atual", "cliente_logada", "cadastro_confirmado", "ficha_validada", "cliente_apta",
    "protocolo", "autorizada", "efeito_escolhido", "tipo_aplicacao", "etapa_agendamento",
    "historico_cliente", "reprogramar", "atendimento_reprogramado", "valor"
]:
    if chave not in st.session_state:
        st.session_state[chave] = None if chave != "protocolo" else 1

# √Årea da cliente
if st.session_state.pagina_atual == "cliente":

    escolha_cliente = st.radio("üß≠ Como deseja acessar?", ["J√° sou cliente", "Fazer novo cadastro"], index=None, key="opcao_cliente")

    if escolha_cliente == "J√° sou cliente":
        with st.form("form_login_cliente"):
            nome_login = st.text_input("üßç Seu nome")
            tel_login = st.text_input("üì± Seu telefone com DDD")
            confirmar_login = st.form_submit_button("‚úÖ Entrar")

            if confirmar_login and nome_login and tel_login:
                caminho = "agenda.json"
                historico = []
                if os.path.exists(caminho):
                    with open(caminho, "r", encoding="utf-8") as f:
                        historico = json.load(f)

                atendimentos = [c for c in historico if c.get("nome") == nome_login and c.get("telefone") == tel_login]

                if atendimentos:
                    st.session_state.cliente_logada = True
                    st.session_state.nome_cliente = nome_login
                    st.session_state.telefone = tel_login
                    st.session_state.historico_cliente = atendimentos
                    st.success("‚ú® Login confirmado com sucesso! Bem-vinda de volta üíñ")
                    st.experimental_rerun()
                else:
                    st.warning("üôà N√£o encontramos seus dados. Verifique o nome e telefone.")

    elif escolha_cliente == "Fazer novo cadastro":
        with st.form("form_cadastro"):
            nome = st.text_input("üßç Nome completo")
            nascimento = st.date_input("üìÖ Data de nascimento", min_value=datetime(1920, 1, 1).date(), max_value=hoje)
            telefone = st.text_input("üìû Telefone com DDD")
            email = st.text_input("üìß Email (opcional)")

            idade = hoje.year - nascimento.year - ((hoje.month, hoje.day) < (nascimento.month, nascimento.day))
            menor = idade < 18

            st.session_state.autorizada = True
            st.info(f"üìå Idade: **{idade} anos**")

            if menor:
                responsavel = st.text_input("üë®‚Äçüë©‚Äçüëß Nome do respons√°vel")
                autorizacao = st.radio("Autoriza√ß√£o recebida?", ["Sim", "N√£o", "Pendente"], index=None)
                if autorizacao != "Sim":
                    st.error("‚ùå Cliente menor sem autoriza√ß√£o ‚Äî atendimento bloqueado.")
                    st.session_state.autorizada = False

            confirmar = st.form_submit_button("‚úÖ Confirmar cadastro")

            if confirmar:
                campos_ok = nome and telefone and nascimento and idade >= 0
                if menor:
                    campos_ok = campos_ok and st.session_state.autorizada

                if campos_ok:
                    st.session_state.nome_cliente = nome
                    st.session_state.nascimento = nascimento
                    st.session_state.telefone = telefone
                    st.session_state.email = email
                    st.session_state.idade_cliente = idade
                    st.session_state.cadastro_confirmado = True
                    st.success("‚úÖ Cadastro finalizado com sucesso!")
                    st.experimental_rerun()
                else:
                    st.warning("‚ö†Ô∏è Preencha todos os dados corretamente para continuar.")


    # üßæ Ficha Cl√≠nica ‚Äî aparece ap√≥s cadastro confirmado e cliente autorizada
    if st.session_state.get("cadastro_confirmado") and st.session_state.get("autorizada"):
        respostas = {}

        col_esq, col_centro, col_dir = st.columns([1, 2, 1])
        with col_centro:
            with st.expander(txt("üßæ Ficha de Anamnese Cl√≠nica", "üßæ Historial de salud"), expanded=True):
                with st.form("form_clinica"):
                    st.markdown("<h4 style='text-align:center;'>üßæ Ficha de Anamnese Cl√≠nica</h4>", unsafe_allow_html=True)

                    perguntas = {
                        "glaucoma": txt("Possui glaucoma ou outra condi√ß√£o ocular diagnosticada?", "¬øTiene glaucoma u otra condici√≥n ocular diagnosticada?"),
                        "infeccao": txt("Tem blefarite, ter√ßol ou outras infec√ß√µes oculares?", "¬øTiene blefaritis, orzuelos u otras infecciones oculares?"),
                        "conjuntivite": txt("J√° teve conjuntivite nos √∫ltimos 30 dias?", "¬øTuvo conjuntivitis en los √∫ltimos 30 d√≠as?"),
                        "cirurgia": txt("Fez cirurgia ocular recentemente?", "¬øHa tenido cirug√≠a ocular reciente?"),
                        "alergia": txt("Tem hist√≥rico de alergias nos olhos ou p√°lpebras?", "¬øTiene alergias en los ojos o p√°rpados?"),
                        "irritacao": txt("Est√° com olhos irritados ou lacrimejando frequentemente?", "¬øTiene ojos irritados o llorosos frecuentemente?"),
                        "gravida": txt("Est√° gr√°vida ou amamentando?", "¬øEst√° embarazada o amamantando?"),
                        "acido": txt("Est√° em tratamento dermatol√≥gico com √°cido?", "¬øEst√° en tratamiento con √°cidos dermatol√≥gicos?"),
                        "sensibilidade": txt("Tem sensibilidade a produtos qu√≠micos ou cosm√©ticos?", "¬øTiene sensibilidad a productos qu√≠micos o cosm√©ticos?"),
                        "colirio": txt("Faz uso de col√≠rios com frequ√™ncia?", "¬øUsa colirios con frecuencia?"),
                        "lentes": txt("Usa lentes de contato?", "¬øUsa lentes de contacto?"),
                        "extensao": txt("J√° fez extens√£o de c√≠lios antes?", "¬øYa se hizo extensiones de pesta√±as?"),
                        "reacao": txt("Teve alguma rea√ß√£o al√©rgica em procedimentos anteriores?", "¬øTuvo alguna reacci√≥n al√©rgica en procedimientos anteriores?")
                    }

                    for chave, pergunta in perguntas.items():
                        col_p = st.columns([1, 4, 1])[1]
                        with col_p:
                            respostas[chave] = st.radio(pergunta, ["Sim", "N√£o"], index=None, key=f"clinica_{chave}")

                    col_btn = st.columns([1, 2, 1])[1]
                    with col_btn:
                        enviar = st.form_submit_button(txt("üì® Finalizar ficha", "üì® Finalizar formulario"))

                    if enviar:
                        if any(resposta is None for resposta in respostas.values()):
                            st.warning("‚ö†Ô∏è " + txt("Voc√™ precisa responder todas as perguntas antes de finalizar.",
                                                    "Debe responder todas las preguntas antes de continuar."))
                            st.session_state.ficha_validada = False
                        else:
                            impeditivos = {
                                "glaucoma": txt("Glaucoma ou condi√ß√£o ocular diagnosticada", "Glaucoma u otra condici√≥n ocular"),
                                "infeccao": txt("Infec√ß√£o ocular", "Infecci√≥n ocular"),
                                "conjuntivite": txt("Conjuntivite recente", "Conjuntivitis reciente"),
                                "cirurgia": txt("Cirurgia ocular recente", "Cirug√≠a ocular reciente"),
                                "reacao": txt("Rea√ß√£o al√©rgica anterior", "Reacci√≥n al√©rgica anterior")
                            }
                            alerta = {
                                "alergia": txt("Hist√≥rico de alergias", "Historial de alergias"),
                                "irritacao": txt("Olhos irritados", "Ojos irritados"),
                                "gravida": txt("Gestante ou lactante", "Embarazada o lactante"),
                                "acido": txt("Tratamento com √°cido", "Tratamiento con √°cido"),
                                "sensibilidade": txt("Sensibilidade a qu√≠micos", "Sensibilidad qu√≠mica")
                            }
                            informativos = {
                                "colirio": txt("Uso frequente de col√≠rios", "Uso frecuente de colirios"),
                                "lentes": txt("Usa lentes de contato", "Usa lentes de contacto"),
                                "extensao": txt("J√° fez extens√£o antes", "Ya se hizo extensiones")
                            }

                            bloqueios_detectados = []
                            alertas_detectados = []
                            info_detectados = []

                            for chave, resposta in respostas.items():
                                if resposta == "Sim":
                                    if chave in impeditivos:
                                        bloqueios_detectados.append(f"- {impeditivos[chave]}")
                                    elif chave in alerta:
                                        alertas_detectados.append(f"- {alerta[chave]}")
                                    elif chave in informativos:
                                        info_detectados.append(f"- {informativos[chave]}")

                            if bloqueios_detectados:
                                st.error("‚ùå " + txt("Cliente n√£o est√° apta para atendimento.",
                                                    "Cliente no apta para atenci√≥n") + "\n\n" +
                                         "\n".join(bloqueios_detectados))
                                st.session_state.ficha_validada = False
                                st.session_state.cliente_apta = False
                                st.stop()
                            else:
                                if alertas_detectados:
                                    st.warning("‚ö†Ô∏è " + txt("Condi√ß√µes que requerem avalia√ß√£o profissional:",
                                                           "Condiciones que requieren evaluaci√≥n profesional:") + "\n\n" +
                                               "\n".join(alertas_detectados))
                                if info_detectados:
                                    st.info("üìé " + txt("Informa√ß√µes adicionais para registro:",
                                                       "Informaci√≥n adicional para el registro:") + "\n\n" +
                                            "\n".join(info_detectados))
                                st.success("‚úÖ " + txt("Cliente apta para continuar ‚Äî ficha validada com sucesso.",
                                                       "Cliente apta para continuar ‚Äî ficha validada correctamente."))
                                st.session_state.ficha_validada = True
                                st.session_state.cliente_apta = True


    # ‚ú® Escolha de Efeito Lash
    if st.session_state.ficha_validada and st.session_state.cliente_apta:
        col_esq, col_centro, col_dir = st.columns([1, 2, 1])
        with col_centro:
            with st.expander(txt("‚ú® Escolha o Efeito Lash", "‚ú® Elige el Efecto Lash"), expanded=True):
                st.markdown("<h4 style='text-align:center;'>‚ú® Efeito Lash</h4>", unsafe_allow_html=True)

                efeitos = {
                    "Cl√°ssica": {
                        "img": "https://i.imgur.com/Nqrwdcm.png",
                        "desc": txt("Distribui√ß√£o uniforme ‚Äî efeito natural e delicado", "Distribuci√≥n uniforme ‚Äî efecto natural y delicado"),
                        "tipo_olho": txt("Olhos amendoado ou sim√©tricos", "Ojos almendrados o sim√©tricos")
                    },
                    "Boneca": {
                        "img": "https://i.imgur.com/vJUuvsl.png",
                        "desc": txt("Centro mais intenso ‚Äî abre e arredonda o olhar", "Centro m√°s intenso ‚Äî abre y redondea la mirada"),
                        "tipo_olho": txt("Olhos pequenos, fechados ou orientais", "Ojos peque√±os, cerrados u orientales")
                    },
                    "Gatinho": {
                        "img": "https://i.imgur.com/zpBFK0e.png",
                        "desc": txt("Alongado no canto externo ‚Äî olhar sensual", "Alargado en la esquina ‚Äî mirada sensual"),
                        "tipo_olho": txt("Olhos ca√≠dos ou arredondados", "Ojos ca√≠dos o redondeados")
                    },
                    "Esquilo": {
                        "img": "https://i.imgur.com/BY5eEsr.png",
                        "desc": txt("Volume entre centro e canto ‚Äî estilo marcante", "Volumen entre el centro y la esquina ‚Äî estilo llamativo"),
                        "tipo_olho": txt("Olhos puxados ou olhos grandes", "Ojos rasgados o grandes")
                    }
                }

                for nome, efeito in efeitos.items():
                    st.markdown("<hr style='margin-top:40px; margin-bottom:30px;'>", unsafe_allow_html=True)
                    col_img, col_txt = st.columns([1.8, 1.2])
                    with col_img:
                        st.image(efeito["img"], width=500)
                    with col_txt:
                        st.markdown(f"<h5 style='text-align:center;'>üéÄ {txt('Efeito','Efecto')} {nome}</h5>", unsafe_allow_html=True)
                        st.caption(efeito["desc"])
                        st.caption("üëÅÔ∏è " + txt("Indicado para:", "Indicado para:") + f" **{efeito['tipo_olho']}**")
                        col_b1, col_b2, col_b3 = st.columns([1, 2, 1])
                        with col_b2:
                            if st.button(txt(f"Selecionar {nome}", f"Seleccionar {nome}"), key=f"btn_{nome}"):
                                st.session_state.efeito_escolhido = nome

                if st.session_state.get("efeito_escolhido"):
                    nome = st.session_state.efeito_escolhido
                    st.success("‚úÖ " + txt(f"Efeito selecionado: {nome}", f"Efecto seleccionado: {nome}"))

    # üéÄ Escolha da T√©cnica
    if st.session_state.get("efeito_escolhido") and not st.session_state.etapa_agendamento:
        if "etapa_agendamento" not in st.session_state:
            st.session_state.etapa_agendamento = False

        col_esq, col_centro, col_dir = st.columns([1, 2, 1])
        with col_centro:
            with st.expander(txt("üéÄ Tipo de Aplica√ß√£o", "üéÄ T√©cnica de aplicaci√≥n"), expanded=True):
                st.markdown("<h4 style='text-align:center;'>üéÄ T√©cnica de Aplica√ß√£o</h4>", unsafe_allow_html=True)

                tipos = {
                    "Eg√≠pcio 3D": {
                        "img": "https://i.imgur.com/TOPRWFQ.jpeg",
                        "desc": txt("Leque 3D art√≠stico ‚Äî acabamento definido e sofisticado.", "Abanico 3D art√≠stico ‚Äî acabado definido y sofisticado."),
                        "valor": "25‚Ç¨"
                    },
                    "Volume Russo 4D": {
                        "img": "https://i.imgur.com/tBX2O8e.jpeg",
                        "desc": txt("4 fios por c√≠lio ‚Äî volume intenso e estruturado.", "4 fibras por pesta√±a ‚Äî volumen intenso y estructurado."),
                        "valor": "25‚Ç¨"
                    },
                    "Volume Brasileiro": {
                        "img": "https://i.imgur.com/11rw6Jv.jpeg",
                        "desc": txt("Formato Y ‚Äî volumoso e natural.", "Formato Y ‚Äî voluminoso y natural."),
                        "valor": "25‚Ç¨"
                    },
                    "Fio a Fio": {
                        "img": "https://i.imgur.com/VzlySv4.jpeg",
                        "desc": txt("1 fio por c√≠lio ‚Äî efeito r√≠mel natural.", "1 fibra por pesta√±a ‚Äî efecto natural tipo m√°scara."),
                        "valor": "25‚Ç¨"
                    }
                }

                for i, (nome, tipo) in enumerate(tipos.items()):
                    st.markdown("<hr style='margin-top:30px; margin-bottom:30px;'>", unsafe_allow_html=True)
                    col_img, col_txt = st.columns([1.6, 1.4])
                    with col_img:
                        st.markdown(f"<div style='text-align:center;'><img src='{tipo['img']}' alt='{nome}' style='width:220px; border-radius:8px;'></div>", unsafe_allow_html=True)
                    with col_txt:
                        st.markdown(f"<h5 style='text-align:center;'>{nome} ‚Äî üí∂ {tipo['valor']}</h5>", unsafe_allow_html=True)
                        st.caption(tipo["desc"])
                        col_b1, col_b2, col_b3 = st.columns([1, 2, 1])
                        with col_b2:
                            if st.button(txt(f"Selecionar {nome}", f"Seleccionar {nome}"), key=f"tipo_{nome}_{i}"):
                                st.session_state.tipo_aplicacao = nome
                                st.session_state.valor = tipo["valor"]
                                st.session_state.etapa_agendamento = True

                if st.session_state.get("tipo_aplicacao"):
                    selecionado = st.session_state.tipo_aplicacao
                    st.success(txt(f"‚úÖ Tipo selecionado: {selecionado} ‚Äî üí∂ {tipos[selecionado]['valor']}", f"‚úÖ T√©cnica seleccionada: {selecionado} ‚Äî üí∂ {tipos[selecionado]['valor']}"))

    # üìÖ Agendamento Boutique
    if st.session_state.get("etapa_agendamento"):
        with st.form("form_agendamento"):
            st.markdown("### üìÖ Agendamento")
            data = st.date_input("üìÜ Escolha a data")
            horario = st.selectbox("‚è∞ Hor√°rio dispon√≠vel", ["09:00", "11:00", "13:00", "15:00", "17:00"])
            obs = st.text_area("üí¨ Observa√ß√£o (opcional)")
            confirmar = st.form_submit_button("‚úÖ Confirmar Agendamento")

            if confirmar:
                protocolo = st.session_state.protocolo
                novo = {
                    "protocolo": protocolo,
                    "nome": st.session_state.nome_cliente,
                    "telefone": st.session_state.telefone,
                    "tipo": st.session_state.efeito_escolhido,
                    "valor": st.session_state.tipo_aplicacao + " ‚Äî " + st.session_state.valor,
                    "data": str(data),
                    "horario": horario,
                    "mensagem": obs
                }

                caminho = "agenda.json"
                historico = []
                if os.path.exists(caminho):
                    with open(caminho, "r", encoding="utf-8") as f:
                        historico = json.load(f)

                historico.append(novo)

                with open(caminho, "w", encoding="utf-8") as f:
                    json.dump(historico, f, indent=2, ensure_ascii=False)

                st.session_state.protocolo += 1
                st.success("‚úÖ Agendamento confirmado com sucesso!")
                st.balloons()


    # üíº Hist√≥rico boutique
    if st.session_state.get("cliente_logada") and isinstance(st.session_state.get("historico_cliente"), list):
        st.markdown(f"### üíº Hist√≥rico de {st.session_state.nome_cliente}")
        for idx, cliente in enumerate(st.session_state["historico_cliente"]):
            with st.expander(f"üìå Atendimento {idx + 1} ‚Äî protocolo {cliente['protocolo']}"):
                st.markdown(f"""
                    <strong>üéÄ T√©cnica:</strong> {cliente['tipo']} ‚Äî {cliente['valor']}<br>
                    <strong>üìÖ Data:</strong> {cliente['data']}<br>
                    <strong>‚è∞ Hor√°rio:</strong> {cliente['horario']}<br>
                    <strong>üí¨ Mensagem:</strong> {cliente['mensagem'] or '‚Äî'}
                """, unsafe_allow_html=True)

    # üîÅ Reprogramar atendimento direto
    if st.session_state.get("cliente_logada") and st.session_state.get("cliente_apta"):
        if st.button("üîÅ Reprogramar √∫ltimo atendimento"):
            atendimentos = st.session_state.historico_cliente
            st.session_state.reprogramar = True
            st.session_state.atendimento_reprogramado = atendimentos[-1]
            st.experimental_rerun()

    if st.session_state.get("reprogramar") and st.session_state.get("atendimento_reprogramado"):
        atendimento = st.session_state.atendimento_reprogramado
        with st.form("form_reprogramar"):
            st.markdown("### üîÅ Reprogramar Atendimento")

            novo_efeito = st.selectbox("‚ú® Novo efeito desejado", ["Cl√°ssica", "Boneca", "Gatinho", "Esquilo"])
            nova_tecnica = st.selectbox("üéÄ Nova t√©cnica", ["Eg√≠pcio 3D", "Volume Russo 4D", "Volume Brasileiro", "Fio a Fio"])
            nova_data = st.date_input("üìÖ Nova data")
            novo_horario = st.selectbox("‚è∞ Novo hor√°rio", ["09:00", "11:00", "13:00", "15:00", "17:00"])
            nova_mensagem = st.text_area("üí¨ Mensagem (opcional)")

            confirmar = st.form_submit_button("‚úÖ Confirmar reprograma√ß√£o")

            if confirmar:
                caminho = "agenda.json"
                historico = []
                if os.path.exists(caminho):
                    with open(caminho, "r", encoding="utf-8") as f:
                        historico = json.load(f)

                for cliente in historico:
                    if cliente["protocolo"] == atendimento["protocolo"]:
                        cliente["tipo"] = novo_efeito
                        cliente["valor"] = nova_tecnica
                        cliente["data"] = str(nova_data)
                        cliente["horario"] = novo_horario
                        cliente["mensagem"] = nova_mensagem
                        break

                with open(caminho, "w", encoding="utf-8") as f:
                    json.dump(historico, f, indent=2, ensure_ascii=False)

                st.success("‚úÖ Atendimento reprogramado com sucesso!")
                st.session_state.reprogramar = False
                st.session_state.atendimento_reprogramado = None

    # ‚ùå Cancelar atendimento
    if st.session_state.get("cliente_logada") and isinstance(st.session_state.get("historico_cliente"), list):
        st.markdown("### ‚ùå Cancelar Atendimento")
        opcoes_cancelamento = [
            f"{c['data']} ‚Äî {c['horario']} ‚Äî protocolo {c['protocolo']}" for c in st.session_state.historico_cliente
        ]
        selecionado = st.selectbox("üìç Escolha atendimento para cancelar", opcoes_cancelamento, index=None)
        confirmar = st.button("‚ö†Ô∏è Cancelar atendimento")

        if confirmar and selecionado:
            protocolo_cancelar = int(selecionado.split("protocolo ")[-1])
            caminho = "agenda.json"
            historico = []
            if os.path.exists(caminho):
                with open(caminho, "r", encoding="utf-8") as f:
                    historico = json.load(f)
            historico = [c for c in historico if c["protocolo"] != protocolo_cancelar]
            with open(caminho, "w", encoding="utf-8") as f:
                json.dump(historico, f, indent=2, ensure_ascii=False)
            st.success("üö´ Atendimento cancelado com sucesso!")

    # üì§ Bot√£o WhatsApp
    if st.session_state.get("cliente_logada") and st.session_state.get("historico_cliente"):
        ultimo = st.session_state.historico_cliente[-1]
        texto = f"""üíñ Atendimento Boutique confirmado!

üìç T√©cnica: {ultimo['tipo']} ‚Äî {ultimo['valor']}
üìÖ Data: {ultimo['data']} √†s {ultimo['horario']}
üí¨ Mensagem: {ultimo['mensagem'] or '‚Äî'}
üìå Protocolo: {ultimo['protocolo']}

Para d√∫vidas ou reagendamentos, fale conosco ü•∞"""

        link = f"https://wa.me/?text={texto.replace(' ', '%20').replace('\n', '%0A')}"
        st.markdown(f"[üì≤ Enviar detalhes via WhatsApp]({link})", unsafe_allow_html=True)



# üë©‚Äçüíº √Årea Administrativa
if st.session_state.pagina_atual == "admin":
    st.markdown("## üë©‚Äçüíº Painel Administrativo")

    # Carrega agendamentos do JSON
    caminho = "agenda.json"
    lista_admin = []
    if os.path.exists(caminho):
        with open(caminho, "r", encoding="utf-8") as f:
            lista_admin = json.load(f)

    if lista_admin:
        opcoes_admin = [f"{c['data']} ‚Äî {c['horario']} ‚Äî {c['nome']} ‚Äî protocolo {c['protocolo']}" for c in lista_admin]
        atendimento_admin = st.selectbox("üìã Selecione atendimento:", opcoes_admin, index=None, key="admin_escolha")

        if atendimento_admin:
            idx = opcoes_admin.index(atendimento_admin)
            cliente = lista_admin[idx]

            st.markdown(f"#### üìå Detalhes de protocolo `{cliente['protocolo']}`")
            st.write(cliente)

            col1, col2 = st.columns(2)

            with col1:
                confirmar_cancelar = st.button("‚ùå Cancelar Atendimento")
                if confirmar_cancelar:
                    lista_admin.pop(idx)
                    with open(caminho, "w", encoding="utf-8") as f:
                        json.dump(lista_admin, f, ensure_ascii=False, indent=2)
                    st.success("‚úÖ Atendimento cancelado com sucesso!")

            with col2:
                import urllib.parse
                fone = cliente["telefone"].replace("(", "").replace(")", "").replace("-", "").replace(" ", "")
                mensagem = f"""
‚ú® Atendimento confirmado na Cris Lash üëë
üìå Protocolo: {cliente['protocolo']}
üìÖ Data: {cliente['data']} √†s {cliente['horario']}
üéÄ T√©cnica: {cliente.get('tipo', cliente.get('valor', ''))}
üí¨ Obs.: {cliente.get('mensagem', '‚Äî')}
"""
                link = f"https://wa.me/55{fone}?text={urllib.parse.quote(mensagem)}"
                st.markdown(f"[üì§ Enviar via WhatsApp]({link})", unsafe_allow_html=True)
    else:
        st.warning("üì≠ Nenhum atendimento registrado ainda.")






elif st.session_state.pagina_atual == "adm":
    st.markdown("<h4>üîê √Årea Administrativa</h4>", unsafe_allow_html=True)
    codigo = st.text_input("üîë C√≥digo de acesso", type="password")
    if st.button("üîì Entrar"):
        if codigo.strip().lower() == "rainha":
            st.session_state.acesso_admin = True
            st.success("üíé Acesso liberado!")
        else:
            st.error("‚ùå C√≥digo inv√°lido.")

    if st.session_state.acesso_admin:
        st.markdown("""
            <div class='box'>
                <h4>üëë Painel Administrativo</h4>
                <p>Gerencie atendimentos com carinho üíñ</p>
            </div>
        """, unsafe_allow_html=True)

        caminho_arquivo = "agenda.json"
        clientes_salvos = []
        if os.path.exists(caminho_arquivo):
            with open(caminho_arquivo, "r", encoding="utf-8") as f:
                clientes_salvos = json.load(f)

        st.markdown("### üìã Lista de atendimentos")
        if clientes_salvos:
            clientes_salvos.sort(key=lambda c: c["protocolo"])
            for idx, cliente in enumerate(clientes_salvos):
                with st.container():
                    st.markdown(f"""
                        <div style='background-color:#d495a2; padding:15px; border-radius:8px;'>
                            <strong>üî¢ Protocolo:</strong> {cliente['protocolo']}<br>
                            <strong>üßç Nome:</strong> {cliente['nome']}<br>
                            <strong>‚ú® Efeito:</strong> {cliente['efeito']}<br>
                            <strong>üéÄ T√©cnica:</strong> {cliente['tipo']}{" ‚Äî "}{cliente['valor']}<br>
                            <strong>üìÖ Data:</strong> {cliente['data']}<br>
                            <strong>‚è∞ Hor√°rio:</strong> {cliente['horario']}<br>
                            <strong>üí¨ Mensagem:</strong> {cliente['mensagem'] or '‚Äî'}
                        </div>
                    """, unsafe_allow_html=True)

                    if st.button(f"‚ùå Excluir {cliente['protocolo']}", key=f"excluir_{idx}"):
                        confirmar = st.radio(f"‚ö†Ô∏è Confirmar exclus√£o de {cliente['protocolo']}?", ["Cancelar", "Confirmar"], key=f"confirmar_{idx}")
                        if confirmar == "Confirmar":
                            clientes_salvos.pop(idx)
                            with open(caminho_arquivo, "w", encoding="utf-8") as f:
                                json.dump(clientes_salvos, f, ensure_ascii=False, indent=2)
                            st.success("‚úÖ Atendimento exclu√≠do!")
                            st.experimental_rerun()
        else:
            st.info("üìÇ Nenhum atendimento registrado.")


        # üìÖ Hor√°rios ocupados
        st.markdown("### üìÖ Hor√°rios ocupados")
        if st.session_state.historico_ocupados:
            agenda = {}
            for data, hora in st.session_state.historico_ocupados:
                dia_str = data.strftime('%d/%m/%Y')




            # Bloqueio e desbloqueio
            with st.expander("üö´ Bloquear per√≠odo"):
                hoje = datetime.today().date()
                dia_bloqueio = st.date_input("üìÖ Data para bloquear/desbloquear", value=hoje, key="bloqueio_data")

                tipo_bloqueio = st.radio("Qual per√≠odo deseja bloquear?", ["‚è∞ Hor√°rio √∫nico", "üåÖ Manh√£ completa", "üåá Tarde completa"], key="tipo_bloqueio")

                if tipo_bloqueio == "‚è∞ Hor√°rio √∫nico":
                    hora_bloqueio = st.selectbox("‚è∞ Hor√°rio", gerar_horarios(), key="bloqueio_hora")
                    if st.button("üö´ Confirmar bloqueio de hor√°rio", key="confirmar_horario_unico"):
                        if esta_livre(dia_bloqueio, hora_bloqueio):
                            st.session_state.historico_ocupados.append((dia_bloqueio, hora_bloqueio))
                            st.success(f"‚úÖ Hor√°rio {hora_bloqueio} bloqueado em {dia_bloqueio.strftime('%d/%m/%Y')}.")
                        else:
                            st.warning("‚ö†Ô∏è Esse hor√°rio j√° est√° ocupado.")

                elif tipo_bloqueio == "üåÖ Manh√£ completa":
                    if st.button("üö´ Confirmar bloqueio da manh√£", key="confirmar_manha"):
                        manha = ["08:00", "08:30", "09:00", "09:30", "10:00", "10:30", "11:00", "11:30"]
                        bloqueados = [h for h in manha if esta_livre(dia_bloqueio, h)]
                        for h in bloqueados:
                            st.session_state.historico_ocupados.append((dia_bloqueio, h))
                        if bloqueados:
                            st.success(f"‚úÖ Manh√£ bloqueada ({', '.join(bloqueados)}) em {dia_bloqueio.strftime('%d/%m/%Y')}.")
                        else:
                            st.warning("‚ö†Ô∏è Todos os hor√°rios da manh√£ j√° estavam ocupados.")

                elif tipo_bloqueio == "üåá Tarde completa":
                    if st.button("üö´ Confirmar bloqueio da tarde", key="confirmar_tarde"):
                        tarde = ["13:00", "13:30", "14:00", "14:30", "15:00", "15:30", "16:00", "16:30"]
                        bloqueados = [h for h in tarde if esta_livre(dia_bloqueio, h)]
                        for h in bloqueados:
                            st.session_state.historico_ocupados.append((dia_bloqueio, h))
                        if bloqueados:
                            st.success(f"‚úÖ Tarde bloqueada ({', '.join(bloqueados)}) em {dia_bloqueio.strftime('%d/%m/%Y')}.")
                        else:
                            st.warning("‚ö†Ô∏è Todos os hor√°rios da tarde j√° estavam ocupados.")

                # Desbloqueio manual
                st.markdown("### üîì Desbloquear hor√°rio manual")
                bloqueios_atuais = [(d, h) for (d, h) in st.session_state.historico_ocupados if d == dia_bloqueio]
                if bloqueios_atuais:
                    hora_desbloqueio = st.selectbox("‚è∞ Selecione um hor√°rio bloqueado para remover", [h for _, h in bloqueios_atuais], key="desbloqueio_hora")
                    if st.button("üîì Confirmar remo√ß√£o de bloqueio", key="remover_bloqueio"):
                        st.session_state.historico_ocupados = [(d, h) for (d, h) in st.session_state.historico_ocupados if not (d == dia_bloqueio and h == hora_desbloqueio)]
                        st.success(f"‚úÖ Bloqueio removido para {hora_desbloqueio} em {dia_bloqueio.strftime('%d/%m/%Y')}.")
                else:
                    st.info("üìÇ Nenhum hor√°rio bloqueado neste dia.")
                    
if st.session_state.get("agendamento_confirmado"):
    cliente = st.session_state.historico_clientes[-1]

    st.markdown(f"""
        <strong> Protocolo:</strong> {cliente['protocolo']}<br>
        <strong> Nome:</strong> {cliente['nome']}<br>
        <strong> Efeito:</strong> {cliente['efeito']}<br>
        <strong> T√©cnica:</strong> {cliente['tipo']} ‚Äî üí∂ {cliente['valor']}<br>
        <strong> Data:</strong> {cliente['data']} ‚Äî üïê {cliente['horario']}<br>
        <strong> Observa√ß√µes:</strong> {cliente['mensagem'] or '‚Äî'}<br>
    """, unsafe_allow_html=True)



# üß† Estados iniciais
for key in ["ficha_validada", "cliente_apta", "efeito_escolhido", "tipo_aplicacao", "valor", "agendamento_confirmado", "cadastro_completo"]:
    if key not in st.session_state:
        st.session_state[key] = None
for key in ["historico_ocupados", "historico_clientes", "protocolo"]:
    if key not in st.session_state:
        st.session_state[key] = [] if key != "protocolo" else 1
























